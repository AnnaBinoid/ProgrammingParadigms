package HW02;

/**
 * Условие
 * На вход подается число n.
 * ● Задача
 * Написать скрипт в любой парадигме, который выводит на экран
 * таблицу умножения всех чисел от 1 до n.
 * Обоснуйте выбор парадигм.
 * ● Пример вывода:
 * 1 * 1 = 1
 * 1 * 2 = 2
 * 1 * 3 = 3
 * 1 * 4 = 4
 * 1 * 5 = 5
 * 1 * 6 = 6
 * ..
 * 1 * 9 = 9
 */

public class MainHW02 {
    public static void main(String[] args) {
        int n = 10;
        /**
         * Если задание - разовое "на коленке" - применяем структурный подход
         */
        /*
        for (int i = 0; i <= n; i++) {
            System.out.printf("1 * %d = %d\n", i, 1 * i);
        }
        */
        /**
         * То же касается и вывода всей таблицы умножения (т.к. не соответствует тз -
         * можно не смотреть, писала больше для интереса)
         */
        /*
        int firstMultiplier = 10;

        for (int i = 1; i <= firstMultiplier ; i++) {
            for (int j = 1; j <= n; j++) {
                System.out.printf("\t%d\t*\t%d\t=\t%d\n", i, j, i * j);
            }
            System.out.println("\n");
        }
         */
        /**
         * Очень маловероятно, что нам придется вызывать таблицу умножения на 1
         * несколько раз в программе, но если заказчик настаивает - тогда
         * удобнее будет использовать процедурную парадигму, т.е. вынести
         * всё ранее написанное в отдельный метод.
         */
        //multiplicationTableBy1(10);
        /**
         * Так же если будет необходимость вызывать несколько разных таблиц умножения
         * с другими значениями множителей - удобнее будет использовать процедурный
         * подход.
         */
        //multiplicationTable(10,10);
    }

    public static void multiplicationTableBy1 (int n){
        for (int i = 0; i <= n; i++) {
            System.out.printf("1 * %d = %d\n", i, 1 * i);
        }
    }

    public static void multiplicationTable (int n, int m) {
        for (int i = 1; i <= m ; i++) {
            for (int j = 1; j <= n; j++) {
                System.out.printf("\t%d\t*\t%d\t=\t%d\n", i, j, i * j);
            }
            System.out.println("\n");
        }
    }
}
